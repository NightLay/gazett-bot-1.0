
from telebot import types
from config import cnfg, bot, texts, rehost_texts, BOT_LINK, OUR_AD



def work_menu(user_id):

    if user_id != cnfg.MY_ID:
        butn_text = '‚óÄÔ∏è –Ω–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ üì¨/‚óÄÔ∏è –º–æ—ë –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ üë§/‚óÄÔ∏è –ø–æ–∑–≤–∞—Ç—å –¥—Ä—É–≥–∞ üë•'
        bot.send_message(user_id, "–Ø –±–æ—Ç –ø–æ–º–æ—à–Ω–∏–∫ —Ä–µ–¥–∞–∫—Ü–∏–∏ \n–ö–∞–∂–¥—ã–π —á–∏—Ç–∞—Ç–µ–ª—å –∑–¥–µ—Å—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –±–ª–∏–∂–µ –∫ –Ω–∞–º", reply_markup=reply_btn_create(3, butn_text))
    else:
        butn_text = '‚óÄÔ∏è —á–∏—Ç–∞—Ç–µ–ª–∏ üë•/‚óÄÔ∏è —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º üì¨/‚óÄÔ∏è –∫–æ–¥-–ø–∞—Ä–æ–ª—å-—Å—Å—ã–ª–∫–∞ #Ô∏è‚É£/‚èπÔ∏è –ö –†–ï–•–û–°–¢–£ –¢–û–í–¨–°–¨ ‚ùóÔ∏è'
        bot.send_message(cnfg.MY_ID, '–ó–¥—Ä–∞–≤–∏—è –∂–µ–ª–∞—é!', reply_markup=reply_btn_create(4, butn_text))



def find_user_num(id_to_seek):
    user_num = 0
    for i in range (0, len(cnfg.users)):
        if cnfg.users[i] == id_to_seek:
            user_num = i
            break
    return(user_num)



def chatting(msg_text, sender_id, sender_name, recipient_id):

    if msg_text == '‚óÄÔ∏è –Ω–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ üì¨' and cnfg.MESSAGE_FLAG == False:

        bot.send_message(sender_id, texts[cnfg.TEXT_NUM], reply_markup=reply_btn_create(1, '‚óÄÔ∏è –æ—Ç–º–µ–Ω–∞ ‚ùå'))
        cnfg.MESSAGE_FLAG = True

    elif cnfg.MESSAGE_FLAG == True and msg_text == '‚óÄÔ∏è –æ—Ç–º–µ–Ω–∞ ‚ùå':
        
        bot.send_message(sender_id, "–í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω")
        bot.send_message(recipient_id, '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ üì≠\n' + sender_name)

        cnfg.MESSAGE_FLAG = False
        work_menu(sender_id)

    elif cnfg.MESSAGE_FLAG == True:

        btn_text = str(sender_id) + '|' + str(recipient_id)+ '/' +str(sender_id * -1) + '|' + str(recipient_id)
        bot.send_message(recipient_id, texts[cnfg.TEXT_NUM + 2] + msg_text + '\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º, ' + sender_name, reply_markup=inline_btn_create(2, '–æ—Ç–≤–µ—Ç–∏—Ç—å ‚úâÔ∏è/–ø—Ä–æ—á–∏—Ç–∞–Ω–æ üì≠', btn_text))
        bot.send_message(sender_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")

        cnfg.MESSAGE_FLAG = False
        work_menu(sender_id)



def login(msg_text, user_num):

    if cnfg.QUESTION_NUM == 0:

        cnfg.QUESTION_NUM += 1
        cnfg.names[user_num] = msg_text
        bot.send_message(cnfg.users[user_num], '–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ' + msg_text)
        bot.send_message(cnfg.users[user_num], '–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª', reply_markup=reply_btn_create(2, '‚óÄÔ∏è –ú üôé‚Äç‚ôÇÔ∏è/‚óÄÔ∏è –ñ üôç‚Äç‚ôÄÔ∏è'))

    elif cnfg.QUESTION_NUM == 1:
        if msg_text == '‚óÄÔ∏è –ú üôé‚Äç‚ôÇÔ∏è':
            cnfg.sexes[user_num] = '‚ôÇ –ú üôé‚Äç‚ôÇÔ∏è'
        elif msg_text == '‚óÄÔ∏è –ñ üôç‚Äç‚ôÄÔ∏è':
            cnfg.sexes[user_num] = '‚ôÄ –ñ üôç‚Äç‚ôÄÔ∏è'
        else:
            cnfg.sexes[user_num] = msg_text
        cnfg.QUESTION_NUM += 1
        bot.send_message(cnfg.users[user_num], '–£–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –º–µ—Å—è—Ü –∏ —á–∏—Å–ª–æ)', reply_markup=reply_btn_create(1, '-- -- ----'))

    elif cnfg.QUESTION_NUM == 2:

        cnfg.QUESTION_NUM += 1
        cnfg.birthdays[user_num] = msg_text
        bot.send_message(cnfg.users[user_num], '–í—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')
        send_chennel_link(cnfg.users[user_num])
        work_menu(cnfg.users[user_num])



def shearling_everyone(msg_text, caht_id):

    if msg_text == '‚óÄÔ∏è —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º üì¨':
        cnfg.SHEARLING_FLAG = True
        bot.send_message(caht_id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º —á–∏—Ç–∞—Ç–µ–ª—è–º', reply_markup=reply_btn_create(1, '‚óÄÔ∏è –æ—Ç–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ—Å—Å—ã–ª–∫—É ‚ùå'))

    elif cnfg.SHEARLING_FLAG == True and msg_text == '‚óÄÔ∏è –æ—Ç–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ—Å—Å—ã–ª–∫—É ‚ùå':
        bot.send_message(caht_id, '–í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –º–µ–Ω—é')
        work_menu(caht_id)
        cnfg.SHEARLING_FLAG = False

    elif cnfg.SHEARLING_FLAG == True:
        for i in range(0, len(cnfg.users)):
            btn_text = str(cnfg.MY_ID) + '|' + str(cnfg.users[i]) + '/' + str((cnfg.MY_ID) * -1) + '|' + str(cnfg.users[i])
            bot.send_message(cnfg.users[i], '–í–ù–ò–ú–ê–ù–ò–ï –í–ù–ò–ú–ê–ù–ò–ï!\n–°–†–û–ß–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –î–õ–Ø –í–°–ï–• –ß–ò–¢–ê–¢–ï–õ–ï–ô –ö–ê–ù–ê–õ–ê!\n\n' + msg_text + '\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –†–µ–¥–∞–∫—Ü–∏—è –∫–∞–Ω–∞–ª–∞', \
                        reply_markup=inline_btn_create(2, '–æ—Ç–≤–µ—Ç–∏—Ç—å ‚úâÔ∏è/–ø—Ä–æ—á–∏—Ç–∞–Ω–æ üì≠', btn_text))

        cnfg.SHEARLING_FLAG = False
        work_menu(caht_id)



def plan_rehost(msg_text, chat_id):

    if msg_text == '‚èπÔ∏è –ö –†–ï–•–û–°–¢–£ –¢–û–í–¨–°–¨ ‚ùóÔ∏è':
        cnfg.START_REHOST_FLAG = True
        bot.send_message(chat_id, rehost_texts[0])
        bot.send_message(chat_id, '‚èπÔ∏èusers: ' + str(cnfg.users) + '\n‚èπÔ∏ènames: ' + str(cnfg.names) + '\n‚èπÔ∏èsexes: ' + str(cnfg.sexes) + '\n‚èπÔ∏èbirthdays: ' + str(cnfg.birthdays) + \
                    '\n‚èπÔ∏èusernames: ' + str(cnfg.usernames) + '\n‚èπÔ∏èblack_list:' + str(cnfg.black_list))
        bot.send_message(chat_id, 'MY_ID = ' + str(cnfg.MY_ID) + '\nCODE = ' + cnfg.CODE + '\nPASSWORD = ' + cnfg.PASSWORD + '\nCHENEL_LINK = ' + cnfg.CHENEL_LINK)
        btn_text = '‚óÄÔ∏è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚û°Ô∏è/‚óÄÔ∏è –æ—Ç–º–µ–Ω–∞ ‚ùå'
        bot.send_message(chat_id, rehost_texts[2], reply_markup=reply_btn_create(2, btn_text))

    elif cnfg.START_REHOST_FLAG == True and msg_text == '‚óÄÔ∏è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚û°Ô∏è':
        for i in range(0, len(cnfg.users)):
            bot.send_message(cnfg.users[i], rehost_texts[3])
        cnfg.REHOST_FLAG = True

    elif cnfg.START_REHOST_FLAG == True and msg_text == '‚óÄÔ∏è –æ—Ç–º–µ–Ω–∞ ‚ùå':
        bot.send_message(chat_id,  rehost_texts[1])
        work_menu(chat_id)



def send_bot_link(user_id):
    global BOT_LINK, OUR_AD

    bot.send_message(user_id, '–°–µ–π—á–∞—Å –ø—Ä–∏—à–ª—ë–º —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-—Ä–µ–∫–ª–∞–º—É –Ω–∞—à–µ–π –∫–∞–Ω–∞–ª–∞, –ø–æ–¥ –Ω–µ–π –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —ç—Ç–æ–≥–æ –±–æ—Ç–∞' \
                + '–ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–º—É, –∫—Ç–æ —Ö–æ—á–µ—Ç –≤—Å—Ç—É–ø–∏—Ç—å –≤ —Ä—è–¥—ã –Ω–∞—à–∏—Ö —á–∏—Ç–∞—Ç–µ–ª–µ–π, –æ–Ω –ø—Ä–æ–π–¥—ë—Ç —Ä–µ—à–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –æ–Ω —Å–º–æ–∂–µ—Ç –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª')
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text='–±–æ—Ç –∫–∞–Ω–∞–ª–∞', url=BOT_LINK)
    markup.add(btn)
    bot.send_message(user_id, OUR_AD + '\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n\n–ú–´ –ñ–î–Å–ú –¢–ï–ë–Ø! –ó–ê–•–û–î–ò (–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –≤ –±–æ—Ç–∞, —Ç–∞–∫ –Ω–∞–¥–æ)', reply_markup=markup)


def send_chennel_link(user_id):
    global OUR_AD
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text='–Ω–∞—à–∞ –≥–∞–∑–µ—Ç–∞', url=cnfg.CHENEL_LINK)
    markup.add(btn)
    bot.send_message(user_id, OUR_AD + '\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî', reply_markup=markup)


def portfolio_check(message, user_num):
    bot.send_message(message.chat.id, '‚óÄÔ∏è –ò–º—è: ' + cnfg.names[user_num] + '\n‚óÄÔ∏è –ü–æ–ª: ' + cnfg.sexes[user_num] + '\n‚óÄÔ∏è –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ' + cnfg.birthdays[user_num], \
                reply_markup=reply_btn_create(2, '‚óÄÔ∏è –ø–µ—Ä–µ–ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üìù/‚óÄÔ∏è –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚¨ÖÔ∏è'))


def change(new, change_val):
    if change_val == cnfg.CODE:
        cnfg.CODE = new
    elif change_val == cnfg.PASSWORD:
        cnfg.PASSWORD = new
    elif change_val == cnfg.CHENEL_LINK:
        cnfg.CHENEL_LINK = new
    bot.send_message(cnfg.MY_ID, '–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω—è–Ω—ã')


def reply_btn_create(btn_cnt, btn_text):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for i in range(0, btn_cnt):
        markup.add(types.KeyboardButton(btn_text.split('/')[i]))
    return markup

def inline_btn_create(btn_cnt, btn_text, btn_clbc):
    markup = types.InlineKeyboardMarkup()
    for i in range(0, btn_cnt):
        btn = types.InlineKeyboardButton(text=btn_text.split('/')[i], callback_data=btn_clbc.split('/')[i])
        markup.add(btn)

    return markup
