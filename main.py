

from config import cnfg, bot, texts
from functions import reply_btn_create, work_menu, find_user_num, login, chatting, portfolio_check, send_bot_link, shearling_everyone, change, plan_rehost, inline_btn_create



@bot.message_handler(commands=['start'])
def greeting(message):
    chat_id = message.chat.id

    if chat_id != cnfg.MY_ID:

        if not chat_id in cnfg.users:
            cnfg.users.append(chat_id)
            cnfg.names.append('-')
            cnfg.sexes.append('-')
            cnfg.birthdays.append('-')
            cnfg.usernames.append('@' + message.from_user.username)

            bot.send_message(cnfg.MY_ID, '@' + message.from_user.username + ' –∑–∞–ø—É—Å—Ç–∏–ª(–∞) –±–æ—Ç–∞')
            bot.send_message(chat_id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞', reply_markup=reply_btn_create(2, '‚óÄÔ∏è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è üìù/‚óÄÔ∏è –≤–æ–π—Ç–∏ –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚ùå'))
        else:
            bot.send_message(chat_id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞')
            work_menu(chat_id)



@bot.message_handler(content_types=['text'])
def message_checking(message):
    chat_id = message.chat.id
    msg_text = message.text

    if chat_id != cnfg.MY_ID and cnfg.REHOST_FLAG == False and not chat_id in cnfg.black_list:
        user_num = find_user_num(chat_id)

        if msg_text == cnfg.CODE:
            cnfg.COMMANDER_FLAG = True
        elif cnfg.COMMANDER_FLAG == True and msg_text == cnfg.PASSWORD:
            cnfg.COMMANDER_FLAG = False
            cnfg.MY_ID = chat_id
            work_menu(chat_id)

        elif msg_text == '‚óÄÔ∏è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è üìù' or msg_text == '‚óÄÔ∏è –ø–µ—Ä–µ–ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üìù':
            bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º', reply_markup=reply_btn_create(1, message.from_user.first_name))
            cnfg.QUESTION_NUM = 0
        elif msg_text == '‚óÄÔ∏è –≤–æ–π—Ç–∏ –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚ùå':
            work_menu(chat_id)

        elif cnfg.QUESTION_NUM != 3:
            login(msg_text, user_num)

        elif msg_text == '‚óÄÔ∏è –Ω–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ üì¨' or cnfg.MESSAGE_FLAG == True:
            cnfg.TEXT_NUM = 0
            chatting(msg_text, cnfg.users[user_num], cnfg.names[user_num], cnfg.MY_ID)
            (user_num)

        elif msg_text == '‚óÄÔ∏è –º–æ—ë –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ üë§':
            portfolio_check(message, user_num)

        elif msg_text == '‚óÄÔ∏è –ø–æ–∑–≤–∞—Ç—å –¥—Ä—É–≥–∞ üë•':
            send_bot_link(chat_id)

        elif msg_text == '‚óÄÔ∏è –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚¨ÖÔ∏è':
            work_menu(chat_id)

        else:
            bot.send_message(chat_id, '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –≤—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –º–µ–Ω—é')
            work_menu(chat_id)

    elif chat_id == cnfg.MY_ID and cnfg.REHOST_FLAG == False:

        if cnfg.MESSAGE_FLAG == True:
            chatting(msg_text, chat_id, '–†–µ–¥–∞–∫—Ü–∏—è –∫–∞–Ω–∞–ª–∞', cnfg.PERS_ID)
        elif msg_text == '‚óÄÔ∏è —á–∏—Ç–∞—Ç–µ–ª–∏ üë•':

            for i in range(0, len(cnfg.users)):
                if not cnfg.users[i] in cnfg.black_list:
                    btn_text = '–Ω–∞–ø–∏—Å–∞—Ç—å/–∑–∞–±–∞–Ω–∏—Ç—å'
                    btn_callback = str(cnfg.users[i]) + '|' + str(chat_id * (-1)) + '/block|' + str(cnfg.users[i])
                    bot.send_message(chat_id, '‚èπÔ∏è' + str(i) + '\n-ID: ' + str(cnfg.users[i]) + '\n-–ò–º—è: ' + cnfg.names[i] + '\n-–ü–æ–ª: ' + cnfg.sexes[i] + \
                                '\n-–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ' + cnfg.birthdays[i] + '\n-–¢–µ–ª–µ–≥—Ä–∞–º: ' + cnfg.usernames[i], reply_markup=inline_btn_create(2, btn_text, btn_callback))
                else:
                    btn_text = '–Ω–∞–ø–∏—Å–∞—Ç—å/—Ä–∞–∑–±–∞–Ω–∏—Ç—å'
                    btn_callback = str(cnfg.users[i]) + '|' + str(chat_id * (-1)) + '/unblock|' + str(cnfg.users[i])
                    bot.send_message(chat_id, 'üö´–ë–ê–ù\n‚èπÔ∏è' + str(i) + '\n-ID: ' + str(cnfg.users[i]) + '\n-–ò–º—è: ' + cnfg.names[i] + '\n-–ü–æ–ª: ' + cnfg.sexes[i] + \
                                '\n-–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ' + cnfg.birthdays[i] + '\n-–¢–µ–ª–µ–≥—Ä–∞–º: ' + cnfg.usernames[i], reply_markup=inline_btn_create(2, btn_text, btn_callback))
            work_menu(chat_id)

        elif msg_text == '‚óÄÔ∏è —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º üì¨' or cnfg.SHEARLING_FLAG == True:
            shearling_everyone(msg_text, chat_id)

        elif msg_text == '‚óÄÔ∏è –∫–æ–¥-–ø–∞—Ä–æ–ª—å-—Å—Å—ã–ª–∫–∞ #Ô∏è‚É£':
            butn_text = '‚óÄÔ∏è –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–¥ üîÑ/‚óÄÔ∏è —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å üîÑ/‚óÄÔ∏è —Å–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É üîÑ/‚óÄÔ∏è –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚¨ÖÔ∏è'
            bot.send_message(chat_id, '–ö–æ–¥: ' + cnfg.CODE + '\n–ü–∞—Ä–æ–ª—å: ' + cnfg.PASSWORD + '\n–°—Å—ã–ª–∫–∞: ' + cnfg.CHENEL_LINK, reply_markup=reply_btn_create(4, butn_text))

        elif msg_text == '‚óÄÔ∏è –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–¥ üîÑ':
            cnfg.CHANGE_CODE_FLAG = True
            bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥')
        elif cnfg.CHANGE_CODE_FLAG == True:
            change(msg_text, cnfg.CODE)
            cnfg.CHANGE_CODE_FLAG = False
            work_menu(chat_id)

        elif msg_text == '‚óÄÔ∏è —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å üîÑ':
            cnfg.CHANGE_PASSWORD_FLAG = True
            bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å')
        elif cnfg.CHANGE_PASSWORD_FLAG == True:
            change(msg_text, cnfg.PASSWORD)
            cnfg.CHANGE_PASSWORD_FLAG = False
            work_menu(chat_id)

        elif msg_text == '‚óÄÔ∏è —Å–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É üîÑ':
            cnfg.CHANGE_LINK_FLAG = True
            bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É')
        elif cnfg.CHANGE_LINK_FLAG == True:
            change(msg_text, cnfg.CHENEL_LINK)
            cnfg.CHANGE_LINK_FLAG = False
            work_menu(chat_id)

        elif msg_text == '‚óÄÔ∏è –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚¨ÖÔ∏è':
            work_menu(chat_id)

        elif msg_text == '‚èπÔ∏è –ö –†–ï–•–û–°–¢–£ –¢–û–í–¨–°–¨ ‚ùóÔ∏è' or cnfg.START_REHOST_FLAG == True:
            plan_rehost(msg_text, chat_id)

        else:
            bot.send_message(chat_id, '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –≤—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –º–µ–Ω—é')
            work_menu(chat_id)
    else:
        bot.send_message(chat_id, '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –≤—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –º–µ–Ω—é')
        work_menu(chat_id)



@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):

    if cnfg.REHOST_FLAG == False:
        if call.data.split('|')[0] != 'block' and call.data.split('|')[0] != 'unblock':

            user1_id = int(call.data.split('|')[0])
            user2_id = int(call.data.split('|')[1])

            if user1_id < 0:
                user_num = find_user_num(user2_id)
                bot.send_message(user1_id * -1, '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ üì≠\n' + cnfg.names[user_num])
                work_menu(user2_id)
            else:
                if user2_id < 0:
                    cnfg.TEXT_NUM = 0
                    user2_id *= -1
                else:
                    cnfg.TEXT_NUM = 1

                bot.send_message(user2_id, texts[cnfg.TEXT_NUM], reply_markup=reply_btn_create(1, '‚óÄÔ∏è –æ—Ç–º–µ–Ω–∞ ‚ùå'))
                cnfg.MESSAGE_FLAG = True
                cnfg.PERS_ID = user1_id

        elif call.data.split('|')[0] == 'block':
            cnfg.black_list.append(int(call.data.split('|')[1]))

        elif call.data.split('|')[0] == 'unblock':
            cnfg.black_list.remove(int(call.data.split('|')[1])) 

        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)



if __name__ == '__main__':
    bot.infinity_polling()
